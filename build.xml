<project name="HPE-Toolkit Build" default="build" basedir="../">

	<!-- Load in Ant-Contrib to give us access to some very useful tasks! -->
    <!-- the .jar file is located in the tools directory -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${basedir}/build-scripts/tools/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <taskdef resource="net/jtools/classloadertask/antlib.xml">
        <classpath>
          <fileset dir="${basedir}/build-scripts/tools" includes="ant-classloader*.jar"/>
        </classpath>
      </taskdef>

    <!--Add JSCH jar to the classpath-->
    <classloader loader="system">
        <classpath>
            <fileset dir="${basedir}/build-scripts/tools" includes="jsch-0.1.49.jar"/>
        </classpath>
    </classloader>

    <!-- load property files -->
    <property file="build-scripts/config/project.properties"/>
    <property file="build-scripts/config/version.properties"/>

    <!-- load shell environment -->
    <property environment="ENV" />

    <target name="build">
        <tstamp>
            <format property="timestamp" pattern="MM/dd/yyyy hh:mm"/>
        </tstamp>

        <record name="${basedir}/${dir.logs}/${log.build}" loglevel="info" append="true"/>

        <echo>Beginning build process...</echo>
        <echo>${timestamp}</echo>
        <echo>This will deploy any files that are in ${dir.source} to ./${dir.releases}</echo>
        <echo>Please make sure that you have everything committed into your source control...</echo>

        <!-- Create a release of our core experience files -->
        <condition property="latest.version.set" else="false">
          <isset property="latest.version"/>
        </condition>
        <if>
            <equals arg1="${latest.version.set}" arg2="true"/>
            <then>
                <echo message="Last release: Version ${latest.version}"/>
            </then>
            <else>
                <echo message="Lucky you. This is the first release for this project (or someone deleted the versions files)"/>
            </else>
        </if>

        <condition property="current.version.set" else="false">
          <isset property="current.version"/>
        </condition>
        <if>
            <equals arg1="${current.version.set}" arg2="false"/>
            <then>
                <input message="Enter a version number for this release" addproperty="current.version" />
            </then>
        </if>

        <echo>Creating a release of src files for version ${current.version}</echo>

        <antcall target="-build.release" />
    </target>

    <target name="-build.release"
    	 depends="
	    	 -create,
	    	 -copy,
	    	 -css,
	    	 -js,
             -images.png,
             -images.jpg,
	    	 -version,
             -tag,
             -upload
    	 "/>

    <target name="-test.release"
         depends="
             -create,
             -copy,
             -version,
             -tag
         "/>

    <target name="upload" depends="-upload"/>

    <target name="-create" description="(PRIVATE) Versions previous release, moves from latest into that folder, empties latest for new release">
        <condition property="releases.exists">
            <available file="${basedir}/${dir.releases}" type="dir"/>
        </condition>
        <if>
            <equals arg1="${releases.exists}" arg2="true"/>
            <then>
                <echo message="The releases directory already exists. Moving on."/>
            </then>
            <else>
                <mkdir dir="${basedir}/${dir.releases}"/>
            </else>
        </if>

        <condition property="latest.exists">
            <available file="${basedir}/${dir.releases.latest}" type="dir"/>
        </condition>
        <if>
            <equals arg1="${latest.exists}" arg2="true"/>
            <then>
                <move todir="${basedir}/${dir.releases}/${latest.version}" includeEmptyDirs="yes">
                    <fileset dir="${basedir}/${dir.releases.latest}" />
                </move>
            </then>
            <else>
                <mkdir dir="${basedir}/${dir.releases.latest}"/>
            </else>
        </if>

    </target>

    <target name="-copy" description="(PRIVATE) Move our src files into this new directory">
        <echo message="Copying over source files..."/>
        <copy todir="${basedir}/${dir.releases.latest}" includeEmptyDirs="true">
            <fileset dir="${dir.source}">
                <exclude name="${dir.js}/**/*.js"/>
                <exclude name="${dir.css}/**/*.css"/>
            </fileset>
        </copy>
        <echo message="source files now in: ${basedir}/${dir.releases.latest}"/>
    </target>

    <target name="-css" description="(PRIVATE) Minify the css files">
        <echo message="Minifying stylesheets..."/>
        <apply executable="java" parallel="false">
            <fileset dir="${dir.source}/${dir.css}/" includes="**/*.css"/>
            <arg line="-jar"/>
            <arg path="${dir.build.tools}/${tool.yuicompressor}"/>
            <srcfile/>
            <arg line="-o"/>
            <mapper type="glob" from="*.css" to="${basedir}/${dir.releases.latest}/${dir.css}/*.min.css"/>
            <targetfile/>
        </apply>
        <echo message="All stylesheets minified and copied to: ${basedir}/${dir.releases.latest}/${dir.css}/"/>
    </target>

    <target name="-js" description="(PRIVATE) Minify the js files">
        <echo message="Minifying scripts..."/>
        <apply executable="java" parallel="false">
            <fileset dir="${dir.source}/${dir.js}" includes="**/*.js"/>
            <arg line="-jar"/>
            <arg path="./${dir.build.tools}/closure-compiler-v1346.jar"/>
            <arg line="--js"/>
            <srcfile/>
            <arg line="--compilation_level" />
            <arg value="${scripts.compilation.level}" />
            <arg line="--warning_level" />
            <arg value="${scripts.compilation.warninglevel}" />
            <arg line="--js_output_file" />
            <mapper type="glob" from="*.js" to="${basedir}/${dir.releases.latest}/${dir.js}/*.min.js"/>
            <targetfile/>
        </apply>
        <echo message="All scripts minified and copied to: ${basedir}/${dir.releases.latest}/${dir.js}/"/>
    </target>

    <target name="-images.png" description="(PRIVATE) Optimize the png images">
        <echo message="Optimizing images..."/>
        <echo message="This part might take a few minutes."/>
        <echo message=" "/>
        <echo message="First, we run optipng on the .png files..."/>
        <if>
            <equals arg1="${images.strip.metadata}" arg2="true"/>
            <then>
                <var name="strip-meta-tags" value="-strip all"/>
            </then>
            <else>
                <var name="strip-meta-tags" value=""/>
            </else>
        </if>
        <!-- osfamily=unix is actually true on OS X as well -->
        <!-- On *nix's and OS X, check for optipng and give a helpful message if it's not installed -->
        <if>
            <and>
                <os family="unix" />
                <available file="optipng" filepath="${ENV.PATH}" />
            </and>
            <then>
                <!-- work around https://sourceforge.net/tracker/?func=detail&aid=2671422&group_id=151404&atid=780916 -->
                <if>
                  <available file="${basedir}/${dir.releases.latest}/${dir.images}/" type="dir" />
                    <then>
                      <delete>
                          <fileset dir="${basedir}/${dir.releases.latest}/${dir.images}/">
                              <include name="**/*.png"/>
                          </fileset>
                      </delete>
                    </then>
                </if>
                <apply executable="optipng" dest="${basedir}/${dir.releases.latest}/${dir.images}/" osfamily="unix">
                    <fileset dir="./${dir.source}/${dir.images}/" includes="**/*.png"  excludes="${images.bypass}, ${images.default.bypass}"/>
                    <arg value="-quiet"/>
                    <arg value="-o7"/>
                    <!--
                       Temporarily fixes #39
                       <arg value="${strip-meta-tags}"/>
                    -->
                    <arg value="-out"/>
                    <targetfile/>
                    <srcfile/>
                    <mapper type="identity"/>
                </apply>
            </then>
            <elseif>
                <os family="unix" />
                <then>
                    <echo message="*** optipng NOT INSTALLED. SKIPPING OPTIMIZATION OF PNGs." />
                    <echo message="*** Install optipng to enable png optimization." />
                    <echo message="*** For instructions see 'Dependencies' at: https://github.com/h5bp/ant-build-script/wiki/Platform" />
                </then>
            </elseif>
            <elseif>
                <os family="windows" />
                <!-- work around https://sourceforge.net/tracker/?func=detail&aid=2671422&group_id=151404&atid=780916 -->
                <then>
                  <if>
                    <available file="${basedir}/${dir.releases.latest}/${dir.images}/"/>
                      <then>
                      <delete>
                        <fileset dir="${basedir}/${dir.releases.latest}/${dir.images}/">
                            <include name="**/*.png"/>
                        </fileset>
                      </delete>
                    </then>
                  </if>
                    <apply executable="${basedir}/${dir.build.tools}/optipng-0.7-win32/optipng.exe" dest="${basedir}/${dir.releases.latest}/${dir.images}/" osfamily="windows">
                        <fileset dir="./${dir.source}/${dir.images}/" includes="**/*.png"  excludes="${images.bypass}, ${images.default.bypass}"/>
                        <arg value="-quiet"/>
                        <arg value="-o7"/>
                        <arg value="${strip-meta-tags}"/>
                        <arg value="-out"/>
                        <targetfile/>
                        <srcfile/>
                        <mapper type="identity"/>
                    </apply>
                </then>
            </elseif>
        </if>
    </target>

    <target name="-images.jpg" description="(PRIVATE) Optimize the jpg images">
        <echo message="Now, we clean up those jpgs..."/>
        <if>
            <equals arg1="${images.strip.metadata}" arg2="true"/>
            <then>
                <var name="strip-meta-tags" value="none"/>
            </then>
            <else>
                <var name="strip-meta-tags" value="all"/>
            </else>
        </if>

        <!-- On *nix's and OS X, check for jpegtran and give a helpful message if it's not installed -->
        <if>
            <and>
                <os family="unix" />
                <available file="jpegtran" filepath="${ENV.PATH}" />
            </and>
            <then>
                <apply executable="jpegtran" dest="${basedir}/${dir.releases.latest}/${dir.images}" osfamily="unix">
                    <fileset dir="${dir.source}/${dir.images}" includes="**/*.jpg" excludes="${images.bypass}, ${images.default.bypass}"/>
                    <arg value="-copy"/>
                    <arg value="${strip-meta-tags}"/>
                    <arg value="-optimize"/>
                    <arg value="-outfile"/>
                    <targetfile/>
                    <srcfile/>
                    <mapper type="identity"/>
                    <!-- you may want to flag optimized images. If so, do it here. Otherwise change this to type="identity" -->
                    <!--<mapper type="glob" from="*.jpg" to="*.jpg"/>-->
                </apply>
            </then>
            <elseif>
                <os family="unix" />
                <then>
                    <echo message="*** jpegtran NOT INSTALLED. SKIPPING OPTIMIZATION OF JPEGs." />
                    <echo message="*** Install jpegtran to enable jpeg optimization." />
                    <echo message="*** For instructions see 'Dependencies' at: https://github.com/h5bp/ant-build-script/wiki/Platform" />
                </then>
            </elseif>
        </if>
        <apply executable="${basedir}/${dir.build.tools}/jpegtran.exe" dest="${basedir}/${dir.releases.latest}/${dir.images}" osfamily="windows">
            <fileset dir="${dir.source}/${dir.images}" includes="**/*.jpg"  excludes="${images.bypass}, ${images.default.bypass}"/>
            <arg value="-copy"/>
            <arg value="${strip-meta-tags}"/>
            <arg value="-optimize"/>
            <arg value="-outfile"/>
            <targetfile/>
            <srcfile/>
            <mapper type="identity"/>
            <!-- you may want to flag optimized images. If so, do it here. Otherwise change this to type="identity" -->
            <!--<mapper type="glob" from="*.jpg" to="*.jpg"/>-->
        </apply>
        <echo message="Images optimization now complete."/>
    </target>

    <target name="-version" description="(PRIVATE) Marks information about this release for future use">
        <exec executable="uname" outputproperty="buildsystem"><arg value="-a"/></exec>
        <propertyfile file="${basedir}/${dir.build}/config/version.properties"
            comment="This file is automatically generated - DO NOT EDIT">
            <entry key="buildtime" value="${timestamp}"/>
            <entry key="latest.version" value="${current.version}"/>
            <entry key="system" value="${buildsystem}"/>
        </propertyfile>
    </target>

    <target name="-tag">
        <if>
            <equals arg1="${git.use}" arg2="true"/>
            <then>
                <git-tag tagname="${current.version}" />
            </then>
            <else>
                <echo message="Tagging is turned off for this project. You can manually tag this release using your source control tools."/>
            </else>
        </if>
    </target>

    <target name="-upload">
        <record name="${basedir}/${dir.logs}/${log.upload}" loglevel="verbose" append="true" action="start"/>
        <echo>Uploading this release and previous release to remote...</echo>
        <input message="Please enter password" addproperty="sftp.pass" />
        <echo>Beginning transfer, this may take a moment so please be patient...</echo>
        <scp todir="${sftp.user}:${sftp.pass}@${sftp.host}:${sftp.dir}" verbose="false">
            <fileset dir="${basedir}/${dir.releases}" includes="${latest.version}/,latest/"/>
        </scp>
        <echo>Transfer complete.</echo>
        <record name="${basedir}/${dir.logs}/${log.upload}" action="stop"/>
    </target>

    <macrodef name="git">
        <attribute name="command" />
        <attribute name="options" default="" />
        <attribute name="dir" default="" />
        <attribute name="failerror" default="false" />
        <element name="args" optional="true" />
        <sequential>
            <echo message="git dir @{dir}" />
            <echo message="git @{command}" />
            <exec executable="git" dir="@{dir}" failonerror="@{failerror}">
                <arg line="@{command} @{options}" />
                <args />
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="git-tag">
        <attribute name="tagName" />
        <attribute name="dir" />
        <attribute name="options" default="" />
        <attribute name="failerror" default="false" />
        <sequential>
            <git command="tag" dir="@{dir}" options="@{options}" failerror="@{failerror}" >
                <args>
                    <arg value="@{tagName}" />
                </args>
            </git>
        </sequential>
    </macrodef>

</project>